/*
*****************************************************************************
                        Assignment 1 - Milestone 1
Full Name : Yongda Long
Student ID# : 172800211
Email : ylong9@myseneca.ca
Section : IPC144NDD

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

1.
the most chanllenge part of this milestone is the inputCString function, first I will need 
to figure out how to receive the user input string, since using %s wont read space and anything after space,
so I have to use %[^\n] to read an entire line for the input string. Then I will need to determine how to 
get the length of the string, I used a for loop to read every character until the terminator, and then compare
the string length to the input min and max value and generate error message, then I need to loop through the process
until I get a vaild result. fortunately I did not run into problems when testing them because I spend a lot time developing.

2.
the biggest different is that assigning 0 the variable will have an address, and having a NULL the variable will not have an
address and thus will run into error if you are trying to access an variable and the address of the variable is set to NULL.
I use 0 when assigning a variable and use NULL to initialize a pointer.

3.
a buffer is a small regiuon of memory that holds data temporarily. so all your input will be storing in the buffer in the beginning,
the as the program is running, you input that stored in the buffer will be taken into the program, but not always all of the buffer will
be input into the program, for example, getchar() will only get the first character stored in the buffer, the rest will be stored in the buffer
still until further use. so input buffer is like the grocery you put in your refrigerator, you stored everying inside, then only take out the necessary
ones when use, and if you dont want anything thats left in the buffer, you can just clear it out and start new input.
